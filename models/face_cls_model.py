"""
TODO: 使用dlib提取脸部特征点以及描述符特征;
      基于自定义深度学习模型训练提取
Time: 2025/03/09-Redal
"""
import os
import sys
import dlib
import cv2
import h5py
import argparse
import numpy as np
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
from torch.utils.data import Dataset
from torch.nn import Transformer

project_path = os.getcwd()
current_path = os.path.join(os.path.dirname(__file__))
sys.path.append(current_path)
sys.path.append(project_path)
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
os.environ['CUDA_VISIBLE_DEVICES'] = '0'



##########################  Dlib人脸特征提取  ##########################
def config():
      parser = argparse.ArgumentParser(description='Face Recognition models and methods',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
      parser.add_argument_group('Dlib Extractor')
      parser.add_argument('--dlib_dirs', type=str, default=os.path.join(project_path, 'weights'),
                        help='the directory of dlib weights')
      parser.add_argument('--dlib_predictor', type=str, default='face_predictor_68_face_landmarks.dat',
                        help='the name of dlib dlib predictor')
      parser.add_argument('--dlib_resnet', type=str, default='face_recognition_resnet_model_v1.dat',
                        help='the name of dlib resnet model for face recognition')
      
      parser.add_argument_group('DPFM Extractor')
      parser.add_argument('--dpfm_dirs', type=str, default=os.path.join(project_path, 'weights'),
                        help='the directory of dpfm weights')
      parser.add_argument('--dpfm_model', type=str, default='dpfm.pth',
                        help='the name of dpfm model')
      args =parser.parse_args()
      return args


class DlibExtractor(object):
      """use dlib to extract face features and descriptors
      :param input: the camera RGB frame
      :param args: generated by config function """
      def __init__(self, input, args, **kwargs):
            self.args = args
            predictor_path = os.path.join(self.args.dlib_dirs, self.args.dlib_predictor)
            resnet_path = os.path.join(self.args.dlib_dirs, self.args.dlib_resnet)
            self.predictor = dlib.shape_predictor(predictor_path)
            self.face_rec = dlib.face_recognition_model_v1(resnet_path)
            # process input frame, usually is gray image
            self.input = cv2.cvtColor(input, cv2.COLOR_RGB2GRAY)
      def __extract__(self):
            """extract face descriptors for recognition"""
            shape = self.predictor(self.input, 0)
            face_descriptor = self.face_rec.compute_face_descriptor(self.input, shape)
            return face_descriptor
      


##########################  主函数测试分析  ##########################
if __name__=='__main__':
      args = config()
      input = cv2.imread(r'assets\face0.jpg')
      dlib_extractor = DlibExtractor(input, args)
      print(dlib_extractor.__extract__())
